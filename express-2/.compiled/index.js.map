{"version":3,"sources":["../src/index.js"],"names":["app","use","bodyParser","json","urlencoded","extended","routes","user","sample","message","get","secret","req","res","admin","sendStatus","middlewares","errorHandler","then","listen","process","env","PORT","helpers","LOGGER","info"],"mappings":";;AAAA;;AAEA;;AACA;;AACA;;AAEA;;AAGA;;AAEA;;AACA;;AACA;;AAEA;;;;;;;;AAEA,IAAMA,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,yBAAR;AAEAD,GAAG,CAACC,GAAJ,CAAQ,uBAAR;AACAD,GAAG,CAACC,GAAJ,CAAQC,uBAAWC,IAAX,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,uBAAWE,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR,E,CAEA;;AAEA;AACA;;AAEA;;AACAL,GAAG,CAACC,GAAJ,CAAQ,YAAR,EAAsBK,mBAAOC,IAA7B;AACAP,GAAG,CAACC,GAAJ,CAAQ,cAAR,EAAwBK,mBAAOE,MAA/B;AACAR,GAAG,CAACC,GAAJ,CAAQ,eAAR,EAAyBK,mBAAOG,OAAhC;AAEAT,GAAG,CAACU,GAAJ,CAAQ,YAAR,EACE,4BAAI;AAACC,EAAAA,MAAM,EAAE;AAAT,CAAJ,CADF,EAEE,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACjB,MAAI,CAACD,GAAG,CAACL,IAAJ,CAASO,KAAd,EAAqB,OAAOD,GAAG,CAACE,UAAJ,CAAe,GAAf,CAAP;AACrBF,EAAAA,GAAG,CAACE,UAAJ,CAAe,GAAf;AACD,CALH,E,CAOA;;AACAf,GAAG,CAACC,GAAJ,CAAQe,wBAAYC,YAApB;AAEA,yBAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA,wBAAiB;AAAA;AAAA;AAAA;AAAA;AACflB,UAAAA,GAAG,CAACmB,MAAJ,CAAWC,OAAO,CAACC,GAAR,CAAYC,IAAvB,EAA6B;AAAA,mBAAMC,oBAAQC,MAAR,CAAeC,IAAf,4DAAwEL,OAAO,CAACC,GAAR,CAAYC,IAApF,OAAN;AAAA,WAA7B;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import 'dotenv/config';\n\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport express from 'express';\n\nimport helmet from 'helmet';\n//import morgan from 'morgan';\n\nimport jwt from 'express-jwt';\n\nimport helpers from './helpers';\nimport middlewares from './middlewares';\nimport routes from './routes';\n\nimport { connectDb } from './models';\n\nconst app = express();\n\napp.use(helmet());\n\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n//app.use(morgan('combined'));\n\n/* Own middlewares */\n//app.use(middlewares.auth);\n\n/* Own APIs */\napp.use('/api/users', routes.user);\napp.use('/api/samples', routes.sample);\napp.use('/api/messages', routes.message);\n\napp.get('/protected',\n  jwt({secret: 'djghhhhuuwiwuewieuwieuriwu'}),\n  function(req, res) {\n    if (!req.user.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n  });\n\n// Application global error handler\napp.use(middlewares.errorHandler);\n\nconnectDb().then(async () => {\n  app.listen(process.env.PORT, () => helpers.LOGGER.info(`Blockchain Supply Chain App is listening on port ${process.env.PORT}!`));\n});\n"],"file":"index.js"}