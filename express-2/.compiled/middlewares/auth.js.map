{"version":3,"sources":["../../src/middlewares/auth.js"],"names":["verifyToken","req","res","next","bearerHeader","headers","bearer","split","bearerToken","helpers","LOGGER","debug","jwt","verify","TokenKey","err","decoded","json","success","message","boom","unauthorized","auths"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAEtC;AACA,MAAMC,YAAY,GAAGH,GAAG,CAACI,OAAJ,CAAY,eAAZ,CAArB,CAHsC,CAItC;;AACA,MAAG,OAAOD,YAAP,KAAwB,WAA3B,EAAwC;AACtC;AACA,QAAME,MAAM,GAAGF,YAAY,CAACG,KAAb,CAAmB,GAAnB,CAAf,CAFsC,CAGtC;;AACA,QAAMC,WAAW,GAAGF,MAAM,CAAC,CAAD,CAA1B,CAJsC,CAMtC;;AACA,QAAIE,WAAJ,EAAiB;AACfC,0BAAQC,MAAR,CAAeC,KAAf,CAAqB,6BAArB,EADe,CAEf;;;AACAC,+BAAIC,MAAJ,CAAWL,WAAX,EAAwBM,gBAAxB,EAAkC,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AACxD,YAAID,GAAJ,EAAS;AACP,iBAAOb,GAAG,CAACe,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,KAAX;AAAkBC,YAAAA,OAAO,EAAE;AAA3B,WAAT,CAAP;AACD,SAFD,MAEO;AACL;AACAlB,UAAAA,GAAG,CAACe,OAAJ,GAAcA,OAAd;AACAb,UAAAA,IAAI;AACL;AACF,OARD;AASD,KAZD,MAaK;AAEH;AACA;AACAA,MAAAA,IAAI,CAACiB,iBAAKC,YAAL,CAAkB,oBAAlB,CAAD,CAAJ;AACD;AACF,GA1BD,MA0BO;AAEL;AACA;AACAlB,IAAAA,IAAI,CAACiB,iBAAKC,YAAL,CAAkB,oBAAlB,CAAD,CAAJ;AACD;AACF,CArCD;;AAuCA,IAAMC,KAAK,GAAG;AAAEtB,EAAAA,WAAW,EAAXA;AAAF,CAAd;eAEesB,K","sourcesContent":["import boom from '@hapi/boom';\nimport jwt from 'jsonwebtoken';\nimport helpers from '../helpers';\nimport { TokenKey } from '../models';\n\nconst verifyToken = (req, res, next) => {\n\n  // check header or url parameters or post parameters for token\n  const bearerHeader = req.headers['authorization'];\n  // Check if bearer is undefined\n  if(typeof bearerHeader !== 'undefined') {\n    // Split at the space\n    const bearer = bearerHeader.split(' ');\n    // Get token from array\n    const bearerToken = bearer[1];\n\n    // decode token\n    if (bearerToken) {\n      helpers.LOGGER.debug('Going to validate the token');\n      // verifies secret and checks exp\n      jwt.verify(bearerToken, TokenKey, function (err, decoded) {\n        if (err) {\n          return res.json({ success: false, message: 'Failed to authenticate token.' });\n        } else {\n          // if everything is good, save to request for use in other routes\n          req.decoded = decoded; \n          next();\n        }\n      });\n    }\n    else {\n\n      // if there is no token\n      // return an error\n      next(boom.unauthorized('No token provided.'));\n    }\n  } else {\n\n    // if there is no token\n    // return an error\n    next(boom.unauthorized('No token provided.'));\n  }\n};\n\nconst auths = { verifyToken };\n\nexport default auths;\n"],"file":"auth.js"}