{"version":3,"sources":["../../src/middlewares/errorHandler.js"],"names":["errorHandler","err","req","res","next","helpers","LOGGER","info","statusCode","name","status","json","message","isServer","output","payload"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC5CC,sBAAQC,MAAR,CAAeC,IAAf,2BAAuCN,GAAvC,iBAAiDA,GAAG,CAACO,UAArD;;AAEA,MAAIP,GAAG,CAACQ,IAAJ,KAAa,mBAAjB,EAAsC;AACpC;AACA,WAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AAED,MAAIX,GAAG,CAACY,QAAR,EAAkB,CAChB;AACA;AACA;AACD;;AACD,SAAOV,GAAG,CAACO,MAAJ,CAAWT,GAAG,CAACa,MAAJ,CAAWN,UAAtB,EAAkCG,IAAlC,CAAuCV,GAAG,CAACa,MAAJ,CAAWC,OAAlD,CAAP;AAGA;;;;;;;AAQD,CAxBD;;eA0Bef,Y","sourcesContent":["import helpers from '../helpers';\n\nconst errorHandler = (err, req, res, next) => {\n  helpers.LOGGER.info(`errorHandler - '${err}' - ${err.statusCode} - called`);\n\n  if (err.name === 'UnauthorizedError') {\n    // jwt authentication error\n    return res.status(401).json({ message: 'Invalid Token' });\n  }\n\n  if (err.isServer) {\n    // log the error...\n    // probably you don't want to log unauthorized access\n    // or do you?\n  }\n  return res.status(err.output.statusCode).json(err.output.payload);\n\n  \n  /*\n  if (typeof (err) === 'string') {\n    // custom application error\n    return res.status(400).json({ message: err });\n  }\n\n  \n  */\n};\n\nexport default errorHandler;\n"],"file":"errorHandler.js"}