{"version":3,"sources":["../../src/models/user.js"],"names":["userSchema","mongoose","Schema","username","type","String","unique","password","timestamps","statics","findByLogin","login","findOne","user","email","pre","next","helpers","LOGGER","debug","isModified","bcrypt","hash","then","hashedPassword","err","boom","badImplementation","methods","comparePassword","candidatePassword","compare","isMatch","unauthorized","getAll","find","map","u","userWithoutPassword","User","model"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport helpers from '../helpers';\n\nimport TokenKey from './key';\nimport jwt from 'jsonwebtoken';\n\nimport boom from '@hapi/boom';\nimport bcrypt from 'bcryptjs';\n\nconst userSchema = new mongoose.Schema({\n  username: { type: String, unique: true },\n  password: String,\n}, { timestamps: true });\n\n\nuserSchema.statics.findByLogin = async function (login) {\n  let user = await this.findOne({\n    username: login,\n  });\n\n  if (!user) {\n    user = await this.findOne({ email: login });\n  }\n  return user;\n};\n\nuserSchema.pre('save', function (next) {\n  const user = this;\n\n  helpers.LOGGER.debug(`${user.username} is going to hash the password`);\n\n  if (!user.isModified('password')) { return next(); }\n  bcrypt.hash(user.password, 10).then((hashedPassword) => {\n    user.password = hashedPassword;\n\n    helpers.LOGGER.debug(`${user.username} has hashed the password now`);\n\n    next();\n  });\n}, (err) => {\n  next(boom.badImplementation(err));\n});\n\nuserSchema.methods.comparePassword = async function (candidatePassword, next) {\n  helpers.LOGGER.debug(`comparePassword: ${this.password}`);\n  helpers.LOGGER.debug(`comparePassword: ${candidatePassword}`);\n  \n  await bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {\n    if (err) return next(boom.unauthorized(err));\n\n    helpers.LOGGER.debug(`comparePassword: ${isMatch}`);\n    next(null, isMatch);\n  });\n};\n\nuserSchema.statics.getAll = async function getAll() {\n  return await this.find().map(u => {\n    const { password, ...userWithoutPassword } = u;\n    return userWithoutPassword;\n  });\n};\n\nconst User = mongoose.model('User', userSchema);\n\nexport default User;"],"file":"user.js"}